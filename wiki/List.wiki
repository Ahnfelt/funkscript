#labels List,Container,Immutable,Pattern-Matching,Syntactic-Sugar
An immutable list is a collection of elements where each element has an index. There is special syntactic sugar and pattern matching available for it.

= Syntax =

{{{
:l [2, 3, 4]         # Let l be a list of three numbers: 2, 3 and 4.
print [0, 1 :: l]    # Inserting in front, prints [0, 1, 2, 3, 4]
print l & [5, 6, 7]  # Appending, prints [2, 3, 4, 5, 6, 7]
:f {
    |[]|             # Matches the empty list
    |[10]|           # Matches a list containing exactly one element: 10
    |[a, b :: r]|    # Matches a list that has at least two elements, which
                     # becomes bound to a and b, and binds the rest of the 
                     # list to r.
}
}}}

= Methods =

|| `ToString` || Returns a string representation of the list. ||
|| `Length` || Returns the number of elements in the list. ||
|| `Get index` || Returns the element at position `index`. ||
|| `Head` || Returns the first element of the list. ||
|| `Tail` || Returns all elements of the list, except the first element, in the same order. ||
|| `Concatenate other` || Returns a list where all the elements of this list is followed by all the elements of the `other` list. ||
|| `Each action` || Calls `action` on each element in the list. ||
|| `Map f` || Returns a list where each element has been passed through the `f` function. That is, `[f(list.Get(0)), f(list.Get(1)), ..., f(list.Get(list.Length - 1))]` ||
|| `Reverse` || Returns a list with the same elements, but in reverse order. ||